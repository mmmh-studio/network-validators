# KMS configuration file

# Information about Tendermint blockchain networks this KMS services
#
# - id: The chain ID for this chain
# - key_format: How this chain handles serialization. Type may be "bech32" or "hex"
# - state_file (optional): path to where the state of the last signing operation is persisted
# - state_hook (optional): user-specified command to run on startup to obtain the current height
#   of this chain. The command should output JSON which looks like the following:
#   {"latest_block_height": "347290"}
[[chain]]
# Note(Ismail): current chain-ids listed below
# As of Feb 19, 2020:
# current mainnet: "cosmoshub-3"
# current test-net: "gaia-13007"
id = "${chain_id}"
key_format = { type = "bech32", account_key_prefix = "cosmospub", consensus_key_prefix = "cosmosvalconspub" }
# Note(Ismail): both these params can be used for double signing prevention
# if not specified the kms assumes a file {chain_id}_priv_validator_state.json
# see: https://github.com/tendermint/kms/blob/57669556a35a35b99f86093e1d100423faf9953f/src/chain.rs#L35
# state_file = "/path/to/cosmoshub_priv_validator_state.json"
# similarly, one provide an additional command line tool which will update the state
# some sanity checks here: https://github.com/tendermint/kms/blob/57669556a35a35b99f86093e1d100423faf9953f/src/chain/state.rs#L131:12
# see also above about these two params
# state_hook = { cmd = ["/path/to/block/height_script", "--example-arg", "cosmoshub"] }

# Note(Ismail): the kms is multi-chain capable; the snippet below is left from the example
# to keep this in mind
# [[chain]]
# id = "irishub"
# key_format = { type = "bech32", account_key_prefix = "iap", consensus_key_prefix = "icp" }
# state_file = "/path/to/irishub_priv_validator_state.json"

## Validator configuration
[[validator]]
# Note(Ismail):
# could be e.g. "tcp://f88883b673fc69d7869cab098de3bafc2ff76eb8@example1.example.com:26658"
# or or addr = "unix:///path/to/socket"
# !!Important!! to keep in mind: "the Secret Connection key associated with gaiad's priv_validator_laddr
# is randomly generated each time it starts. It is static so long as gaiad is running,
# but changes the next time you start it."
# Details:
# https://github.com/tendermint/kms/issues/371
# https://github.com/tendermint/tendermint/issues/3105
addr = "${kms.validator_addr}"
chain_id = "${chain_id}"
reconnect = true # true is the default
# e.g. secret_key = path/to/secret_connection.key
# if it doesn't exist, it will be generated to this path (details: https://github.com/tendermint/kms/blob/57669556a35a35b99f86093e1d100423faf9953f/src/config/validator.rs#L62-L63)
secret_key = "${kms.secret_connection_key}"
# max_height = "500000"

## Signing provider configuration
# Note(Ismail): ledger is also supported (see: https://github.com/tendermint/kms/blob/57669556a35a35b99f86093e1d100423faf9953f/tmkms.toml.example#L43-L45)
# Here, we will only use the `yubihsm` backend!
[[providers.yubihsm]]
# Note(Ismail): type = "http" is an alternative but we'll stick with USB here
adapter = { type = "usb" }
# Note(Ismail): key = Authentication key ID to use to authenticate to the YubiHSM, in our case likely 1
# hence this isn't a variable:
auth = { key = 1, password_file = "${kms.pw_file_path}" } # /path/to/password â€šor pass raw password as `password`
keys = [{ chain_ids = ["${chain_id}"], key = 1 }]
serial_number = "${kms.yubi_serialnum}" # identify serial number of a specific YubiHSM to connect to
#connector_server = { laddr = "tcp://127.0.0.1:12345", cli = { auth_key = 2 } } # run yubihsm-connector compatible server

# Note(Ismail): This can be used for test purposes instead:
# enable the `softsign` feature to use this backend
# note: the `yubihsm` or `ledger` backends are recommended
#[[providers.softsign]]
#chain_ids = ["cosmoshub-1"]
#key_format = "base64"
#path = "path/to/signing.key"